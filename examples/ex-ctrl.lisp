(in-package :cl-user)

(uiop:define-package controlcl/ex-ctrl
  (:use :cl :controlcl :sdl2)
  (:export
   #:main))

(in-package :controlcl/ex-ctrl)

(defun main ()
  (sdl2:with-init (:everything)
    (sdl2:with-window (window :title "ControlCL Testing" :w 800 :h 600 :flags '(:shown))
      (sdl2:with-renderer (renderer window :flags '(:accelerated))
        (controlcl:with-controlcl (control-me renderer)
          (let ((slider (controlcl-add-slider control-me "test" 100 200 50 0 100))
                (bang (controlcl-add-bang control-me "test" 100 100)))
            (sdl2:with-event-loop (:method :poll)
              (:mousemotion (:x x :y y)
                            (controlcl-mouse-over control-me x y))
              (:keyup (:keysym keysym)
                      (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)
                        (sdl2:push-quit-event))
                      (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-h)
                        (controlcl-hide control-me))
                      (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-s)
                        (controlcl-show control-me))
                      (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-1)
                        (decf (slider-value slider)))
                      (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-2)
                        (incf (slider-value slider))))
              (:quit () t)
              (:idle ()
                     (sdl2:mouse-state)
                     (sdl2:render-clear renderer)
                     (controller-draw bang)
                     (controller-draw slider)
                     (set-color-from-palette renderer :black)
                     (sdl2:render-present renderer)
                     (sdl2:delay 20)))))))))
